CREATE FILTER MODULE BACKEND_ISO_FLOW_IS_NETWORK_MESSAGE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF STARTSWITH(Root.XMLNSC.data.body.messageType, '08') THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE BACKEND_ISO_FLOW_RESTORE_REPLYTOQ
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;

		SET OutputRoot.MQMD.ReplyToQ = InputRoot.XMLNSC.data.request.data.ReplyToQ;
		SET OutputRoot.MQMD.ReplyToQMgr = InputRoot.XMLNSC.data.request.data.ReplyToQMgr;
		SET OutputRoot.XMLNSC.data.group = InputRoot.XMLNSC.data.request.data.group;

		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE BACKEND_ISO_FLOW_SET_RESPONSE_ISO_ERROR
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;

		SET OutputRoot.MQMD.ReplyToQ = InputRoot.XMLNSC.data.ReplyToQ;
		SET OutputRoot.MQMD.ReplyToQMgr = InputRoot.XMLNSC.data.ReplyToQMgr;

		IF FIELDTYPE(InputRoot.XMLNSC.data.error) IS NOT NULL THEN
			IF InputRoot.XMLNSC.data.error = 'not signed on' THEN
				SET OutputRoot.XMLNSC.data.request = InputLocalEnvironment.request;
				IF FIELDTYPE(InputRoot.XMLNSC.data.errorLD) IS NOT NULL THEN
					SET OutputRoot.XMLNSC.data.body.responseCode = InputRoot.XMLNSC.data.errorLD;
				ELSE
					SET OutputRoot.XMLNSC.data.body.responseCode = '81';
				END IF;
			ELSEIF InputRoot.XMLNSC.data.error = 'failed to connect' THEN
				SET OutputRoot.XMLNSC.data=InputLocalEnvironment.request.data;
				IF FIELDTYPE(InputRoot.XMLNSC.data.errorLD) IS NOT NULL THEN
					SET OutputRoot.XMLNSC.data.body.responseCode = InputRoot.XMLNSC.data.errorLD;
				ELSE
					SET OutputRoot.XMLNSC.data.body.responseCode = '81';
				END IF;
			ELSE
				IF FIELDTYPE(InputRoot.XMLNSC.data.errorGN) IS NOT NULL THEN
					SET OutputRoot.XMLNSC.data.body.responseCode = InputRoot.XMLNSC.data.errorGN;
				ELSE
					SET OutputRoot.XMLNSC.data.body.responseCode = '99';
				END IF;
			END IF;
			SET OutputRoot.XMLNSC.data.body.messageType = SUBSTRING(InputRoot.XMLNSC.data.body.messageType FROM 1 FOR 2) || '10';
		END IF;

		IF FIELDTYPE(InputLocalEnvironment.request) IS NOT NULL THEN
			SET OutputRoot.XMLNSC.data.request = InputLocalEnvironment.request;
			SET OutputRoot.XMLNSC.data.adaptor = InputLocalEnvironment.request.data.destisnation;
			SET OutputRoot.XMLNSC.data.dir = 'I';
			SET OutputRoot.XMLNSC.data.type = 'error';
		END IF;

		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE BACKEND_ISO_FLOW_SET_SIGN_ON
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;

		IF STARTSWITH(InputRoot.XMLNSC.data.body.messageType, '08') AND InputRoot.XMLNSC.data.body.networkManagementInformationCode = '001' THEN
			IF InputRoot.XMLNSC.data.body.responseCode = '00' THEN
				SET OutputRoot.XMLNSC.data.control = 'sign on';
				PROPAGATE TO TERMINAL 'out1';
			ELSE
				PROPAGATE TO TERMINAL 'out2';
			END IF;
		END IF;
		RETURN FALSE;
	END;
END MODULE;

CREATE COMPUTE MODULE BACKEND_ISO_FLOW_SET_BACKEND_ISO_ERROR_GENERAL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;

		IF FIELDTYPE(InputRoot.XMLNSC.data.ReplyToQ) IS NOT NULL THEN
			SET OutputRoot.MQMD.ReplyToQ = InputRoot.XMLNSC.data.ReplyToQ;
			SET OutputRoot.MQMD.ReplyToQMgr = InputRoot.XMLNSC.data.ReplyToQMgr;
		ELSE
			SET OutputRoot.MQMD.ReplyToQ=InputRoot.XMLNSC.data.request.data.ReplyToQ;
			SET OutputRoot.MQMD.ReplyToQMgr = InputRoot.XMLNSC.request.data.ReplyToQMgr;
		END IF;

		IF FIELDTYPE(InputRoot.XMLNSC.data.error) IS NOT NULL THEN
			IF InputRoot.XMLNSC.data.error = 'timeout' THEN
				IF FIELDTYPE(InputRoot.XMLNSC.data.errorTO) IS NOT NULL THEN
					SET OutputRoot.XMLNSC.data.body.responseCode = InputRoot.XMLNSC.data.errorTO;
				ELSE
					SET OutputRoot.XMLNSC.data.body.responseCode = '82';
				END IF;
			ELSE
				IF FIELDTYPE(InputRoot.XMLNSC.data.errorGN) IS NOT NULL THEN
					SET OutputRoot.XMLNSC.data.body.responseCode = InputRoot.XMLNSC.data.errorGN;
				ELSE
					SET OutputRoot.XMLNSC.data.body.responseCode = '99';
				END IF;
			END IF;
			SET OutputRoot.XMLNSC.data.body.messageType = SUBSTRING(InputRoot.XMLNSC.data.body.messageType FROM 1 FOR 2) || '10';
		END IF;

		IF FIELDTYPE(InputRoot.XMLNSC.data.request) IS NOT NULL THEN
			SET OutputRoot.XMLNSC.data.adaptor = InputRoot.XMLNSC.data.request.data.destination;
		END IF;

		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE BACKEND_ISO_FLOW_STORE_REPLYTOQ
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;

		IF FIELDTYPE(InputRoot.XMLNSC.data.ReplyToQ) IS NOT NULL THEN
			SET OutputRoot.XMLNSC.data.ReplyToQ = InputRoot.XMLNSC.data.ReplyToQ;
		ELSE
			SET OutputRoot.XMLNSC.data.ReplyToQ = InputRoot.MQMD.ReplyToQ;
		END IF;
		SET OutputLocalEnvironment.request.data = InputRoot.XMLNSC.data;
		SET OutputRoot.MQMD.MsgId = InputRoot.MQMD.CorrelId;

		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE BACKEND_ISO_FLOW_SET_REPLY_BACKEND_ISO_MQ1_IN
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data.ReplyQM = 'QM1';
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE BACKEND_ISO_FLOW_SET_REPLY_BACKEND_ISO_MQ2_IN
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data.ReplyQM = 'QM2';
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE ISO_CLIENT_ADAPTER_FLOW_SET_REPLYQM_OUT
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		IF FIELDTYPE(InputRoot.XMLNSC.data.request.data.ReplyQM) IS NULL THEN
			RETURN TRUE; -- ReplyQM not set
		ELSEIF InputRoot.XMLNSC.data.request.data.ReplyQM = 'QM1' THEN
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		ELSE
			PROPAGATE TO TERMINAL 'out2';
			RETURN FALSE;			
		END IF;
	END;
END MODULE;