CREATE FILTER MODULE CORE_SYARIAH_FLOW_IS_NETWORK_MESSAGE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF STARTSWITH(Root.XMLNSC.data.body.messageType, '08') THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
END MODULE;


CREATE COMPUTE MODULE CORE_SYARIAH_FLOW_SET_SIGN_ON
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		IF STARTSWITH(InputRoot.XMLNSC.data.body.messageType, '08') AND InputRoot.XMLNSC.data.body.networkManagementInformationCode = '001' THEN
			IF InputRoot.XMLNSC.data.body.responseCode = '00' THEN
				SET OutputRoot.XMLNSC.data.control = 'sign on';
				PROPAGATE TO TERMINAL 'out1';
			ELSE
				PROPAGATE TO TERMINAL 'out2';
			END IF;
		END IF;
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE CORE_SYARIAH_FLOW_STORE_REPLYTOQ
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		--SET OutputRoot.XMLNSC.data.ReplyToQ = InputRoot.MQMD.ReplyToQ;
		--SET OutputRoot.XMLNSC.data.ReplyToQMgr = InputRoot.MQMD.ReplyToQMgr;
		--SET OutputLocalEnvironment.request.data = InputRoot.XMLNSC.data;

		IF FIELDTYPE(InputRoot.XMLNSC.data.ReplyToQ) IS NOT NULL THEN
			SET OutputRoot.XMLNSC.data.ReplyToQ = InputRoot.XMLNSC.data.ReplyToQ;
			--SET OutputRoot.XMLNSC.data.ReplyToQMgr = InputRoot.XMLNSC.data.ReplyToQMgr;
		ELSE
			SET OutputRoot.XMLNSC.data.ReplyToQ = InputRoot.MQMD.ReplyToQ;
			--SET OutputRoot.XMLNSC.data.ReplyToQMgr = InputRoot.MQMD.ReplyToQMgr;
		END IF;
		SET OutputLocalEnvironment.request.data = InputRoot.XMLNSC.data;
		SET OutputRoot.MQMD.MsgId = InputRoot.MQMD.CorrelId;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE CORE_SYARIAH_FLOW_RESTORE_REPLYTOQ
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();

		SET OutputRoot.MQMD.ReplyToQ = InputRoot.XMLNSC.data.request.data.ReplyToQ;
		SET OutputRoot.MQMD.ReplyToQMgr = InputRoot.XMLNSC.data.request.data.ReplyToQMgr;
		SET OutputRoot.XMLNSC.data.group = InputRoot.XMLNSC.data.request.data.group;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE CORE_SYARIAH_FLOW_SET_RESPONSE_ISO_ERROR
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();

		SET OutputRoot.MQMD.ReplyToQ = InputRoot.XMLNSC.data.ReplyToQ;
		SET OutputRoot.MQMD.ReplyToQMgr = InputRoot.XMLNSC.data.ReplyToQMgr;

		IF FIELDTYPE(InputRoot.XMLNSC.data.error) IS NOT NULL THEN
			IF InputRoot.XMLNSC.data.error = 'not signed on' THEN
				SET OutputRoot.XMLNSC.data.request = InputLocalEnvironment.request;
				SET OutputRoot.XMLNSC.data.body.responseCode = '81';
			ELSEIF InputRoot.XMLNSC.data.error = 'failed to connect' THEN
				SET OutputRoot.XMLNSC.data=InputLocalEnvironment.request.data;
				SET OutputRoot.XMLNSC.data.body.responseCode = '81';
			ELSE
				SET OutputRoot.XMLNSC.data.body.responseCode = '99';
			END IF;
			SET OutputRoot.XMLNSC.data.body.messageType = SUBSTRING(InputRoot.XMLNSC.data.body.messageType FROM 1 FOR 2) || '10';
		END IF;

		IF FIELDTYPE(InputLocalEnvironment.request) IS NOT NULL THEN
			SET OutputRoot.XMLNSC.data.request = InputLocalEnvironment.request;
			SET OutputRoot.XMLNSC.data.adaptor = InputLocalEnvironment.request.data.destisnation;
			SET OutputRoot.XMLNSC.data.dir = 'I';
			SET OutputRoot.XMLNSC.data.type = 'error';
		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE FILTER MODULE CORE_SYARIAH_FLOW_ACK_FILTER
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF Root.XMLNSC.data.body.responseCode = '00' THEN
			IF FIELDTYPE(Root.XMLNSC.data.request.data.body.ack) IS NOT NULL AND Root.XMLNSC.data.request.data.body.ack = 'true' THEN
				RETURN TRUE;
			ELSE
				RETURN FALSE;
			END IF;
		ELSE
			RETURN FALSE;
		END IF;
	END;

END MODULE;

CREATE COMPUTE MODULE CORE_SYARIAH_FLOW_SET_SYARIAH_ERROR_GENERAL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		--SET OutputRoot.MQMD.ReplyToQ = InputRoot.XMLNSC.data.ReplyToQ;
		--SET OutputRoot.MQMD.ReplyToQMgr = InputRoot.XMLNSC.data.ReplyToQMgr;
		IF FIELDTYPE(InputRoot.XMLNSC.data.ReplyToQ) IS NOT NULL THEN
			SET OutputRoot.MQMD.ReplyToQ = InputRoot.XMLNSC.data.ReplyToQ;
			SET OutputRoot.MQMD.ReplyToQMgr = InputRoot.XMLNSC.data.ReplyToQMgr;
		ELSE
			SET OutputRoot.MQMD.ReplyToQ=InputRoot.XMLNSC.data.request.data.ReplyToQ;
			SET OutputRoot.MQMD.ReplyToQMgr = InputRoot.XMLNSC.request.data.ReplyToQMgr;
		END IF;

		IF FIELDTYPE(InputRoot.XMLNSC.data.error) IS NOT NULL THEN
			IF InputRoot.XMLNSC.data.error = 'timeout' THEN
				-- SET OutputRoot.XMLNSC.data.request = InputLocalEnvironment.request;
				SET OutputRoot.XMLNSC.data.body.responseCode = '82';
			ELSE
				SET OutputRoot.XMLNSC.data.body.responseCode = '99';
			END IF;
			SET OutputRoot.XMLNSC.data.body.messageType = SUBSTRING(InputRoot.XMLNSC.data.body.messageType FROM 1 FOR 2) || '10';
		END IF;

		IF FIELDTYPE(InputRoot.XMLNSC.data.request) IS NOT NULL THEN
			-- SET OutputRoot.XMLNSC.data.request = InputLocalEnvironment.request;
			SET OutputRoot.XMLNSC.data.adaptor = InputRoot.XMLNSC.data.request.data.destination;
			-- SET OutputRoot.XMLNSC.data.dir = 'I';
			-- SET OutputRoot.XMLNSC.data.type = 'error';
		END IF;

		RETURN TRUE;
	END;
END MODULE;