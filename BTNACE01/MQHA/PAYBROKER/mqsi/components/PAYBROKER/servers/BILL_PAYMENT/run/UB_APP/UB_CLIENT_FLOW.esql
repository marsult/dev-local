CREATE COMPUTE MODULE UB_CLIENT_FLOW_MOVE_RESP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.MQMD.ReplyToQ = '';
		SET OutputRoot.MQMD.ReplyToQMgr = '';
		SET OutputRoot.XMLNSC.data.response = InputLocalEnvironment.XMLNSC;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_CHECK_RESPONSE
	DECLARE tns NAMESPACE 'univbrawijaya.h2h.billpayment.ws';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();

		IF InputRoot.XMLNSC.data.response.data.inquryResult.tns:status.tns:errorCode = '00' THEN
			PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		ElSE
			PROPAGATE TO TERMINAL 'out2' DELETE NONE;	
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE UB_CLIENT_FLOW_ADD_AMOUNT_TOTAL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		
		DECLARE i INTEGER 1;
		FOR CFMAST AS InputLocalEnvironment.billDetails[] DO
			
		END FOR;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_CHECK_F2
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		
		SET OutputRoot.XMLNSC.data.group = InputRoot.XMLNSC.data.request.data.group;
		IF InputRoot.XMLNSC.data.body.abcsResponses = 'F2' OR InputRoot.XMLNSC.data.body.abcsResponses = '[F2]' THEN
			PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		ElSE
			PROPAGATE TO TERMINAL 'out2' DELETE NONE;
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_PAYMENT_COPY_RESPONSE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.XMLNSC = InputRoot.XMLNSC;		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_PAYMENT_MOVE_RESP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.MQMD.ReplyToQ = '';
		SET OutputRoot.MQMD.ReplyToQMgr = '';
		SET OutputRoot.XMLNSC.data.response = InputLocalEnvironment.XMLNSC;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_PAYMENT_CHECK_RESPONSE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE tns NAMESPACE 'univbrawijaya.h2h.billpayment.ws';
		CALL CopyEntireMessage();
		IF InputRoot.XMLNSC.data.response.data.PaymentResponse.tns:status.tns:errorCode = '00' THEN
			PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		ElSE
			PROPAGATE TO TERMINAL 'out2' DELETE NONE;	
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		SET OutputRoot.XMLNSC.data.body.responseLength_F2 = '0';
		SET OutputRoot.XMLNSC.data.body.responseCode_F2 = '00';
		SET OutputRoot.XMLNSC.data.body.responseHeader_F2 = '';
		SET OutputRoot.XMLNSC.data.body.FILLER_F2 = '11';
		SET OutputRoot.XMLNSC.data.body.ERROR_F2 = 'Payment Not Define';
		SET OutputRoot.XMLNSC.data.body.FILLER_F2 = '11';
		SET OutputRoot.XMLNSC.data.body.TLBERR_F2 = '01';
		SET OutputRoot.XMLNSC.data.body.AVBAL_F2 = '160';
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_SET_REPLY_TO_MQIN
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		SET OutputRoot.MQMD.ReplyToQ = 'UB.PAYMENT_REPLY';
		SET OutputRoot.MQMD.ReplyToQMgr = 'BTNMDWBROKER.QM';
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_ADD_DESTINATION
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		SET OutputRoot.XMLNSC.data.destination = 'core-' || InputRoot.XMLNSC.data.source;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_ADD_DESTINATION_CORE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		SET OutputRoot.XMLNSC.data.destination = 'core-' || InputRoot.XMLNSC.data.source;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_SET_CORRELID
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		SET OutputRoot.MQMD.CorrelId = InputRoot.MQMD.MsgId;
		SET OutputRoot.XMLNSC.data.temp = InputRoot.MQMD.MsgId;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_CLEAN_MSG
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		DELETE FIELD OutputLocalEnvironment.param;
		DELETE FIELD OutputLocalEnvironment.variables;
		DELETE FIELD OutputRoot.XMLNSC.sql;
		DELETE FIELD OutputRoot.XMLNSC.data.response;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_CHECK_RAW_MESSAGE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
				DECLARE I INTEGER;
		SET I = LENGTH(InputRoot.XMLNSC.data.raw);
		SET	OutputRoot.XMLNSC.data.rawLength = I;
		IF I > 0 THEN
			PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		ElSE
			PROPAGATE TO TERMINAL 'out2' DELETE NONE;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE UB_CLIENT_FLOW_CHECK_SOAP_PROCESS_RESPONSE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		IF OutputRoot.XMLNSC.data.body.responseCode = '99' THEN
			PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		ElSE
			PROPAGATE TO TERMINAL 'out2' DELETE NONE;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
