BROKER SCHEMA gen.subflow
DECLARE ns NAMESPACE 'univbrawijaya.h2h.billpayment.ws';

CREATE COMPUTE MODULE REVERSAL_SET_TIMEOUT
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		DECLARE OutputTimestamp TIMESTAMP CURRENT_TIMESTAMP + CAST((delayTime + 1) AS INTERVAL SECOND);
		SET OutputLocalEnvironment.variables.TimerControl.Action = 'SET';
		SET OutputLocalEnvironment.variables.TimerControl.Identifier = CAST(InputRoot.MQMD.CorrelId AS CHARACTER CCSID 1208);
		SET OutputLocalEnvironment.variables.TimerControl.StartDate = 'TODAY';
		SET OutputLocalEnvironment.variables.TimerControl.StartTime = CAST(OutputTimestamp AS TIME);
		SET OutputLocalEnvironment.variables.TimerControl.IgnoreMissed = TRUE;
		SET OutputLocalEnvironment.variables.TimerControl.AllowOverwrite = TRUE;
		SET OutputLocalEnvironment.variables.TimerControl.Count = 1;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE REVERSAL_CANCEL_TO
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.variables.TimerControl.Action = 'CANCEL';
		SET OutputLocalEnvironment.variables.TimerControl.Identifier = CAST(InputRoot.MQMD.CorrelId AS CHARACTER CCSID 1208);
--		PROPAGATE TO TERMINAL 'out1';
--		SET OutputRoot = InputRoot;
--		PROPAGATE TO TERMINAL 'out2';
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE REVERSAL_CREATE_TIMOUT_RESP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CREATE FIELD OutputRoot.XMLNSC.data.ReversalResponse;
		DECLARE req REFERENCE TO InputRoot.XMLNSC.ns:Reversal.ReversalRequest;
		DECLARE res REFERENCE TO OutputRoot.XMLNSC.data.ReversalResponse;
		
		SET res.responseCode = '68';
		SET res.originalPaymentMsg = req.originalPaymentMsg;
		SET res.sid = req.sid;
		SET res.transDateTime = req.transDateTime;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE REVERSAL_CREATE_FAILED_RESP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		DECLARE req REFERENCE TO InputRoot.XMLNSC.ns:Inquiry.InquiryRequest;
		DECLARE res REFERENCE TO OutputRoot.XMLNSC.data.InquiryResponse;
		
		SET res.responseCode = '69';
		SET res.additionalData = req.additionalData;
		SET res.collectingAgentCode = req.collectingAgentCode;
		SET res.paymentCode = req.paymentCode;
		SET res.semeter = req.semeter;
		SET res.studentId = req.studentId;
		SET res.transDateTime = req.transDateTime;
		SET res.year = req.year;
		SET res.signature = req.signature;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE REVERSAL_DELETE_EVNVAR
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		DELETE FIELD OutputLocalEnvironment.variables;
		SET OutputLocalEnvironment.counter = 1;
		SET OutputLocalEnvironment.CorrelId = InputRoot.MQMD.CorrelId;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE REVERSAL_REMOVE_LCLENV
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		DELETE FIELD OutputLocalEnvironment.param;
		DELETE FIELD OutputLocalEnvironment.variables;
		DELETE FIELD OutputLocalEnvironment.WrittenDestination;
		DELETE FIELD OutputLocalEnvironment.SOAP;
		DELETE FIELD OutputRoot.HTTPResponseHeader;
		DELETE FIELD OutputRoot.XMLNSC.ns:ReversalResponse;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE REVERSAL_VERIFY_COUNTER
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		IF CAST(InputRoot.XMLNSC.data.counter AS INTEGER) > 3 THEN
			PROPAGATE TO TERMINAL 'out1';
		ELSE
			SET OutputRoot.XMLNSC.data.counter = CAST(InputRoot.XMLNSC.data.counter AS INTEGER) + 1;
			PROPAGATE TO TERMINAL 'out2';
		END IF;
			
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE REVERSAL_NO_COUNTER_YET
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		SET OutputRoot.XMLNSC.data.counter = 1;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE REVERSAL_CHECK_COUNTER
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		IF InputLocalEnvironment.counter IS NOT NULL THEN
			IF CAST(InputLocalEnvironment.counter AS INTEGER) > 3 THEN
				PROPAGATE TO TERMINAL 'out1';
			ELSE
				SET OutputLocalEnvironment.counter = CAST(InputLocalEnvironment.counter AS INTEGER) + 1;
			END IF;
		ELSE
			SET OutputLocalEnvironment.counter = CAST(InputLocalEnvironment.counter AS INTEGER) + 1;
		END IF;
		PROPAGATE TO TERMINAL 'out2';
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
