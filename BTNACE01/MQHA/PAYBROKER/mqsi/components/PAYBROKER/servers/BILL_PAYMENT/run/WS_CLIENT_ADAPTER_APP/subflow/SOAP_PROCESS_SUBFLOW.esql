BROKER SCHEMA subflow

CREATE COMPUTE MODULE SOAP_PROCESS_SUBFLOW_CHECK_SOAP_ACTION
	CREATE FUNCTION Main() RETURNS BOOLEAN 
	BEGIN 
		CALL CopyEntireMessage();
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = InputLocalEnvironment.Destination.HTTP.RequestURL;
		SET OutputLocalEnvironment.Destination.SOAPAction = InputLocalEnvironment.Destination.SOAPAction;
		SET OutputLocalEnvironment.request_id = InputLocalEnvironment.request_id;
		SET OutputLocalEnvironment.request_timestamp = InputLocalEnvironment.request_timestamp;
		SET OutputLocalEnvironment.source = InputLocalEnvironment.source;
		SET OutputLocalEnvironment.MQMD = InputRoot.MQMD;
		SET OutputRoot.XMLNSC.*.log = null;
		IF InputLocalEnvironment.Destination.SOAPAction = '' THEN
			PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		ElSE
			PROPAGATE TO TERMINAL 'out2' DELETE NONE;	
		END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE SOAP_PROCESS_SUBFLOW_REVERSAL_ADD_HEADER
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		SET OutputLocalEnvironment= InputLocalEnvironment;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = InputLocalEnvironment.Destination.HTTP.RequestURL;
		SET OutputLocalEnvironment.request_id = InputLocalEnvironment.request_id;
		SET OutputLocalEnvironment.request_timestamp = InputLocalEnvironment.request_timestamp;
		SET OutputLocalEnvironment.source = InputLocalEnvironment.source;
		SET OutputLocalEnvironment.MQMD = InputRoot.MQMD;
--		SET OutputRoot.XMLNSC.ns:Reversal.ns:Amount = '1000';
						
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
