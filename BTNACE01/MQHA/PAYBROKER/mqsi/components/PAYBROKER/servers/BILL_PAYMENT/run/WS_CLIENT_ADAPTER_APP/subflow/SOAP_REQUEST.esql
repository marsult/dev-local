BROKER SCHEMA Subflow

DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';

CREATE COMPUTE MODULE INQUIRY_ADD_MQMD_FAILURE_SOAP2
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment = InputLocalEnvironment;

--		SET OutputRoot.MQMD = InputLocalEnvironment.MQMD;
		SET OutputRoot.HTTPRequestHeader = NULL;
		SET OutputRoot.HTTPResponseHeader = NULL;
		SET OutputRoot.BLOB = NULL;
--		SET OutputRoot.XMLNSC.data = InputLocalEnvironment.data;
--		SET OutputRoot.XMLNSC.data.body.responseCode = '89';

		DECLARE TEMP CHARACTER;
		IF FIELDTYPE(InputRoot.BLOB.BLOB) IS NOT NULL THEN
			SET TEMP = CAST(InputRoot.BLOB.BLOB AS CHAR CCSID 1208 Encoding 815);
			SET TEMP = SUBSTRING(TEMP AFTER '<faultcode');
			SET TEMP = SUBSTRING(TEMP AFTER '>');
			--SET OutputRoot.XMLNSC.data.body.faultcode = SUBSTRING(TEMP BEFORE '</faultcode>');
			SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Body.soapenv:Fault.faultcode = SUBSTRING(TEMP BEFORE '</faultcode>');
			
			SET TEMP = SUBSTRING(TEMP AFTER '<faultstring');
			SET TEMP = SUBSTRING(TEMP AFTER '>');
			--SET OutputRoot.XMLNSC.data.body.faultstring = SUBSTRING(TEMP BEFORE '</faultstring>');
			SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Body.soapenv:Fault.faultstring = SUBSTRING(TEMP BEFORE '</faultstring>');
			
			SET TEMP = SUBSTRING(TEMP AFTER '<faultactor');
			SET TEMP = SUBSTRING(TEMP AFTER '>');
			--SET OutputRoot.XMLNSC.data.body.faultstring = SUBSTRING(TEMP BEFORE '</faultstring>');
			SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Body.soapenv:Fault.faultactor = SUBSTRING(TEMP BEFORE '</faultactor>');
		
		--	SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Body.soapenv:Fault.faultactor = 'Generated';
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE SET_GENERATED_SOAP_FAULT
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputLocalEnvironment.dir = 'I';
		
		DECLARE ptrException REFERENCE TO InputExceptionList.*[1];
		DECLARE messageText CHARACTER;
		WHILE lastmove(ptrException) DO
			IF ptrException.Number IS NOT NULL THEN
        		SET messageText = ptrException.Text;
  			END IF;
  			move ptrException lastchild;
  		END WHILE;
		
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Body.soapenv:Fault.faultstring = messageText;
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Body.soapenv:Fault.faultactor = 'Generated';
		IF CONTAINS(messageText, 'timeout') THEN
			SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Body.soapenv:Fault.faultcode = 'G01';
		ELSEIF CONTAINS(messageText, 'socket operation') THEN
			SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Body.soapenv:Fault.faultcode = 'G02';
		ELSE
			SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Body.soapenv:Fault.faultcode = 'G99';
		END IF;
		
		SET OutputRoot.MQMD = InputRoot.MQMD;
		RETURN TRUE;
	END;
	
END MODULE;

CREATE COMPUTE MODULE INQUIRY_ADD_MQMD_FAILURE_SOAP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputRoot.MQMD = InputLocalEnvironment.MQMD;
		SET OutputRoot.HTTPRequestHeader = NULL;
		SET OutputRoot.HTTPResponseHeader = NULL;
		SET OutputRoot.BLOB = NULL;
		SET OutputRoot.XMLNSC.data = InputLocalEnvironment.data;
		
		DECLARE ptrException REFERENCE TO InputExceptionList.*[1];
		DECLARE messageText CHARACTER;
		WHILE lastmove(ptrException) DO
			IF ptrException.Number IS NOT NULL THEN
        		SET messageText = ptrException.Text;
  			END IF;
  			move ptrException lastchild;
  		END WHILE;

		SET OutputRoot.XMLNSC.data.body.tesText = messageText;

		IF CONTAINS(messageText, 'timeout') THEN
			SET OutputRoot.XMLNSC.data.body.faultcode = 'G01';
			SET OutputRoot.XMLNSC.data.body.faultstring =  messageText;
		ELSE
			SET OutputRoot.XMLNSC.data.body.faultcode = 'G02';
			SET OutputRoot.XMLNSC.data.body.faultstring =  messageText;
		END IF;

		SET OutputRoot.XMLNSC.BLOB = InputRoot.BLOB;
		DELETE FIELD OutputRoot.BLOB;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE INQUIRY_ADD_MQMD
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputLocalEnvironment.dir = 'I';

		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE SOAP_REQUEST_CHECK_ISPAYMENT
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		
		IF FIELDTYPE(InputLocalEnvironment.data.isPayment) IS NOT NULL THEN
			IF InputLocalEnvironment.data.isPayment ='true' THEN
				SET OutputRoot.MQMD.MsgId = CAST(InputLocalEnvironment.data.coreRequest.MsgId AS BLOB CCSID 1208) ;
				PROPAGATE TO TERMINAL 'out';
				RETURN TRUE;
			ELSE 
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			END IF;
		ELSE
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;		
	END;
END MODULE;