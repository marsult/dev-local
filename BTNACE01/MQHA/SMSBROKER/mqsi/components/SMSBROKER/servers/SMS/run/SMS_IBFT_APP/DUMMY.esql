--PAYMENT
---------
CREATE COMPUTE MODULE ISO_PAYMENT_FLOW_SET_QUERY
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data.query.CorrelId = CAST(InputRoot.MQMD.CorrelId AS CHARACTER CCSID 1208);

		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE PAYMENT_FLOW_COPY_REPLY
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE PAYMENT_FLOW_RESTORE_REPLY
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		IF InputLocalEnvironment.data.type = 'dsp-response' THEN
			SET OutputRoot.XMLNSC.data = InputLocalEnvironment.data;
		ELSE
			SET OutputRoot.XMLNSC.data.body = InputLocalEnvironment.data.body;
			SET OutputRoot.XMLNSC.data.code = InputLocalEnvironment.data.code;
		END IF;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE PAYMENT_FLOW_SET_FLOWTYPE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data.body.flowType = 'P';
		SET OutputRoot.XMLNSC.data.coreresp = InputLocalEnvironment.data;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE PAYMENT_FLOW_SET_RESPONSE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data.response = InputLocalEnvironment.data;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE ISO_PAYMENT_FLOW_COPY_CORERESP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE ISO_PAYMENT_FLOW_MOVE_RESP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

CREATE COMPUTE MODULE ISO_PAYMENT_FLOW_SET_ENV
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data;
		RETURN TRUE;
	END;
END MODULE;

--CREATE COMPUTE MODULE ISO_PAYMENT_FLOW_SET_CORELID
-- CREATE FUNCTION Main() RETURNS BOOLEAN
-- BEGIN
-- SET OutputRoot = InputRoot;
-- SET OutputLocalEnvironment.CorrelId = CAST(InputRoot.XMLNSC.data.CorrelId AS BLOB CCSID 1208);
-- SET OutputRoot.MQMD = NULL;
-- RETURN TRUE;
-- END;
--
-- CREATE PROCEDURE CopyMessageHeaders() BEGIN
-- DECLARE I INTEGER 1;
-- DECLARE J INTEGER;
-- SET J = CARDINALITY(InputRoot.*[]);
-- WHILE I < J DO
-- SET OutputRoot.*[I] = InputRoot.*[I];
-- SET I = I + 1;
-- END WHILE;
-- END;
--
-- CREATE PROCEDURE CopyEntireMessage() BEGIN
-- SET OutputRoot = InputRoot;
-- END;
--END MODULE;
--CREATE COMPUTE MODULE ISO_PAYMENT_FLOW_SET_DESTINATION
-- CREATE FUNCTION Main() RETURNS BOOLEAN
-- BEGIN
-- SET OutputRoot = InputRoot;
---- SET OutputRoot.MQMD = NULL;
-- SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData.queueName = TRIM(InputRoot.XMLNSC.data.ReplyToQ);
-- SET OutputRoot.MQMD.CorrelId = CAST(InputRoot.XMLNSC.data.CorrelId AS BLOB CCSID 1208);
-- SET OutputRoot.MQMD.MsgId = CAST(InputRoot.XMLNSC.data.CorrelId AS BLOB CCSID 1208);
---- SET OutputRoot.MQMD.ReplyToQ = TRIM(InputRoot.XMLNSC.data.ReplyToQ);
---- SET OutputRoot.MQMD.ReplyToQMgr = TRIM(InputRoot.XMLNSC.data.ReplyToQMgr);
---- SET OutputRoot.MQMD.PutApplName = 'DataFlowEngine';
-- RETURN TRUE;
-- END;
--
-- CREATE PROCEDURE CopyMessageHeaders() BEGIN
-- DECLARE I INTEGER 1;
-- DECLARE J INTEGER;
-- SET J = CARDINALITY(InputRoot.*[]);
-- WHILE I < J DO
-- SET OutputRoot.*[I] = InputRoot.*[I];
-- SET I = I + 1;
-- END WHILE;
-- END;
--
-- CREATE PROCEDURE CopyEntireMessage() BEGIN
-- SET OutputRoot = InputRoot;
-- END;
--END MODULE;
--CREATE COMPUTE MODULE ISO_PAYMENT_FLOW_REMOVE_HEADER
-- CREATE FUNCTION Main() RETURNS BOOLEAN
-- BEGIN
-- SET OutputRoot = InputRoot;
-- SET OutputLocalEnvironment.CorrelId = CAST(InputRoot.XMLNSC.data.CorrelId AS BLOB CCSID 1208);
-- SET OutputRoot.MQMD = NULL;
-- RETURN TRUE;
-- END;
--
-- CREATE PROCEDURE CopyMessageHeaders() BEGIN
-- DECLARE I INTEGER 1;
-- DECLARE J INTEGER;
-- SET J = CARDINALITY(InputRoot.*[]);
-- WHILE I < J DO
-- SET OutputRoot.*[I] = InputRoot.*[I];
-- SET I = I + 1;
-- END WHILE;
-- END;
--
-- CREATE PROCEDURE CopyEntireMessage() BEGIN
-- SET OutputRoot = InputRoot;
-- END;
--END MODULE;

CREATE COMPUTE MODULE ISO_PAYMENT_FLOW_SET_RAW_TYPE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		SET OutputRoot.XMLNSC.data.type = OutputLocalEnvironment.reqori.TYPE;
		SET OutputRoot.XMLNSC.data.raw = OutputLocalEnvironment.reqori.RAW;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

--REVERSAL
----------

--------------------------------------------------


--CREATE COMPUTE MODULE REVERSAL_FLOW_COPY_RESP
--	CREATE FUNCTION Main() RETURNS BOOLEAN
--	BEGIN
--		SET OutputRoot = InputRoot;
--		SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data;
--		RETURN TRUE;
--	END;
--
--	CREATE PROCEDURE CopyMessageHeaders() BEGIN
--		DECLARE I INTEGER 1;
--		DECLARE J INTEGER;
--		SET J = CARDINALITY(InputRoot.*[]);
--		WHILE I < J DO
--			SET OutputRoot.*[I] = InputRoot.*[I];
--			SET I = I + 1;
--		END WHILE;
--	END;
--
--	CREATE PROCEDURE CopyEntireMessage() BEGIN
--		SET OutputRoot = InputRoot;
--	END;
--END MODULE;
--
--
--CREATE COMPUTE MODULE REVERSAL_FLOW_RESTORE_RESP
--	CREATE FUNCTION Main() RETURNS BOOLEAN
--	BEGIN
--		SET OutputRoot = InputRoot;
--		SET OutputRoot.XMLNSC.data.coreresp = InputLocalEnvironment.data.coreresp;
--		SET OutputRoot.XMLNSC.data.billerresp = InputLocalEnvironment.data.billerresp;
--		RETURN TRUE;
--	END;
--
--	CREATE PROCEDURE CopyMessageHeaders() BEGIN
--		DECLARE I INTEGER 1;
--		DECLARE J INTEGER;
--		SET J = CARDINALITY(InputRoot.*[]);
--		WHILE I < J DO
--			SET OutputRoot.*[I] = InputRoot.*[I];
--			SET I = I + 1;
--		END WHILE;
--	END;
--
--	CREATE PROCEDURE CopyEntireMessage() BEGIN
--		SET OutputRoot = InputRoot;
--	END;
--END MODULE;


CREATE COMPUTE MODULE ISO_REVERSAL_FLOW_CHECK_RESPONSE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		IF InputRoot.XMLNSC.data.body.responseCode = '00' THEN --reversal success
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		ELSE
			SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data;
			RETURN TRUE;
		END IF;
		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE ISO_REVERSAL_FLOW_STORE_CORERESP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.data.coreresp = InputRoot.XMLNSC.data;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE ISO_REVERSAL_FLOW_SET_RAW_TYPE2
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.XMLNSC.data.raw = InputLocalEnvironment.reqori.RAW;
		SET OutputRoot.XMLNSC.data.type = InputLocalEnvironment.reqori.TYPE;
		SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE ISO_REVERSAL_FLOW_SET_QUERY_ABCS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data.ReplyToQ = InputRoot.MQMD.ReplyToQ;
		SET OutputRoot.MQMD.ReplyToQMgr = '';
		SET OutputRoot.XMLNSC.data.query.code = InputRoot.XMLNSC.data.code;
		SET OutputRoot.XMLNSC.data.query.source = InputRoot.XMLNSC.data.source;
		SET OutputRoot.XMLNSC.data.query.seq_num = InputRoot.XMLNSC.data.body.TLBF20;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE ISO_REVERSAL_FLOW_SET_QUERY_ISO
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.MQMD.ReplyToQMgr = '';
		SET OutputRoot.XMLNSC.data.ReplyToQ = InputRoot.MQMD.ReplyToQ;
		SET OutputRoot.XMLNSC.data.query.code = InputRoot.XMLNSC.data.code;
		SET OutputRoot.XMLNSC.data.query.source = InputRoot.XMLNSC.data.source;
		SET OutputRoot.XMLNSC.data.query.type = InputRoot.XMLNSC.data.type;
		SET OutputRoot.XMLNSC.data.query.messageType = SUBSTRING(InputRoot.XMLNSC.data.body.originalDataElements FROM 1 FOR 4);
		SET OutputRoot.XMLNSC.data.query.retrievelReferenceNumber = TRIM(SUBSTRING(InputRoot.XMLNSC.data.body.originalDataElements FROM 5 FOR 12));
		SET OutputRoot.XMLNSC.data.query.date = SUBSTRING(InputRoot.XMLNSC.data.body.originalDataElements FROM 17 FOR 4);
		SET OutputRoot.XMLNSC.data.query.time = SUBSTRING(InputRoot.XMLNSC.data.body.originalDataElements FROM 21 FOR 6);
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE ISO_REVERSAL_FLOW_SET_MAP_ID
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data.request = null;
		SET OutputRoot.XMLNSC.data.billerResponse = InputRoot.XMLNSC.data.request.data.billerResponse;
		SET OutputRoot.XMLNSC.data.billerResponse.request = null;
		SET OutputRoot.XMLNSC.data.frontOriginal = InputRoot.XMLNSC.data.request.data.frontOriginal;
		SET OutputRoot.XMLNSC.data.request = null;
		SET OutputRoot.XMLNSC.data.frontOriginal.query = null;
		IF InputRoot.XMLNSC.data.body.responseCode = '000' THEN
			SET OutputRoot.XMLNSC.data.mappingId = OutputRoot.XMLNSC.data.frontOriginal.group||'.'||OutputRoot.XMLNSC.data.frontOriginal.code||'.rev-succes';
		ELSE
			SET OutputRoot.XMLNSC.data.mappingId = OutputRoot.XMLNSC.data.frontOriginal.group||'.'||OutputRoot.XMLNSC.data.frontOriginal.code||'.rev-failed';
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


--CREATE COMPUTE MODULE ISO_REVERSAL_FLOW_SET_DESTINATION
--	CREATE FUNCTION Main() RETURNS BOOLEAN
--	BEGIN
--		SET OutputRoot = InputRoot;
--		SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData.queueName = InputRoot.XMLNSC.data.ReplyToQ;
--		RETURN TRUE;
--	END;
--
--	CREATE PROCEDURE CopyMessageHeaders() BEGIN
--		DECLARE I INTEGER 1;
--		DECLARE J INTEGER;
--		SET J = CARDINALITY(InputRoot.*[]);
--		WHILE I < J DO
--			SET OutputRoot.*[I] = InputRoot.*[I];
--			SET I = I + 1;
--		END WHILE;
--	END;
--
--	CREATE PROCEDURE CopyEntireMessage() BEGIN
--		SET OutputRoot = InputRoot;
--	END;
--END MODULE;
