CREATE COMPUTE MODULE IBFT_PAY_FLOW_SET_MAPPING_ID
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data.ReplyToQ = InputRoot.MQMD.ReplyToQ;
		SET OutputRoot.XMLNSC.data.ReplyToQMgr = InputRoot.MQMD.ReplyToQMgr;
		SET OutputRoot.XMLNSC.data.mappingId = 'req-core.'||InputRoot.XMLNSC.data.group||'.'||InputRoot.XMLNSC.data.code;
		-- IF CONTAINS(InputRoot.XMLNSC.data.codex, 'iso') AND InputRoot.XMLNSC.data.body.reservedPrivate2 <> NULL THEN
		SET OutputRoot.XMLNSC.data.mappingId = OutputRoot.XMLNSC.data.mappingId||'.'||SUBSTRING(InputRoot.XMLNSC.data.body.reservedPrivate2 FROM 1 FOR 3);
		-- END IF;
		SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE IBFT_PAY_FLOW_ERROR
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		PROPAGATE TO TERMINAL 'out1';
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data.body.responseCode = '99';
		SET OutputRoot.XMLNSC.data.body.messageType = '0210';
		SET OutputRoot.XMLNSC.data.code = OutputRoot.XMLNSC.data.body.messageType||'.'||InputRoot.XMLNSC.data.body.processingCode;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE IBFT_PAY_FLOW_CHECK_RESP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		IF InputRoot.XMLNSC.data.body.responseCode = '00' THEN
			SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data;
			RETURN TRUE;
		ELSE
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE IBFT_PAY_FLOW_SET_SUCCES_RES
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data = InputLocalEnvironment.data;
		SET OutputRoot.MQMD.ReplyToQMgr = '';
		RETURN TRUE;
	END;
END MODULE;

CREATE FILTER MODULE IBFT_PAY_FLOW_CHECK_REVERSE_FILTER
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF Root.XMLNSC.data.coreAct = 'reverse' THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE IBFT_PAY_FLOW_STORE_RESP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE IBFT_PAY_FLOW_SET_CONTENT
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		IF InputRoot.XMLNSC.data.type LIKE '%dsp%' THEN
			SET OutputRoot.XMLNSC.data = InputLocalEnvironment.data;
		ELSE
			SET OutputRoot.XMLNSC.data.body = InputLocalEnvironment.data.body;
		END IF;
		SET OutputRoot.MQMD.ReplyToQMgr = '';
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE IBFT_PAY_FLOW_SET_MAP_ID
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		--IF InputRoot.XMLNSC.data.coreResponse.type LIKE '%iso%' THEN
		SET OutputRoot.XMLNSC.data.mappingId = 'core-reverse.'||InputRoot.XMLNSC.data.coreResponse.source;
		--ELSE
		-- SET OutputRoot.XMLNSC.data.mappingId = 'core-reverse';
		--END IF;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE IBFT_PAY_FLOW_CHECK_RESPONSE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		SET OutputRoot.XMLNSC.data = InputRoot.XMLNSC.data.request.data.body.frontOriginal;
		SET OutputRoot.XMLNSC.data.coreResponse = InputRoot.XMLNSC.data;
		SET OutputRoot.XMLNSC.data.coreResponse.request = NULL;
		SET OutputRoot.XMLNSC.data.coreRequest = InputRoot.XMLNSC.data.request.data;
		SET OutputRoot.XMLNSC.data.coreRequest.body.frontOriginal = NULL;
		IF InputRoot.XMLNSC.data.body.responseCode = '000' OR InputRoot.XMLNSC.data.body.responseCode = '00' THEN -- core transaction succes
			--SET OutputRoot.XMLNSC.data.flowType = 'P';
			RETURN TRUE;
		ELSE --ke core gagal
			SET OutputRoot.XMLNSC.data.reqtimestamp = InputRoot.XMLNSC.data.request.data.body.frontOriginal.reqtimestamp;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

CREATE COMPUTE MODULE IBFT_PAY_FLOW_SET_REQTIMESTAMP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data.reqtimestamp = InputRoot.XMLNSC.data.request.data.reqtimestamp;

		RETURN TRUE;
	END;
END MODULE;