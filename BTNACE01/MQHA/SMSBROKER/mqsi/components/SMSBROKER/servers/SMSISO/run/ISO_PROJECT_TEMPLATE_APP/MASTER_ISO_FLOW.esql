

CREATE COMPUTE MODULE MASTER_ISO_FLOW_SET_QUEUE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data.ReplyToQ = InputRoot.MQMD.ReplyToQ;
		SET OutputRoot.MQMD.ReplyToQMgr = '';
		SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE MASTER_ISO_FLOW_SET_TO_RES
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		IF InputRoot.XMLNSC.data.body.frontOriginal.data.destination IS NOT NULL THEN
			SET OutputRoot.XMLNSC.data = InputRoot.XMLNSC.data.body.frontOriginal;
			SET OutputRoot.XMLNSC.data.coreResponse = null;
			SET OutputRoot.XMLNSC.data.coreRequest = null;
		END IF;
		
		IF STARTSWITH(OutputRoot.XMLNSC.data.body.messageType, '022') THEN
			SET OutputRoot.XMLNSC.data.body.messageType = '0230';
		ELSEIF STARTSWITH(OutputRoot.XMLNSC.data.body.messageType, '02') THEN
			SET OutputRoot.XMLNSC.data.body.messageType = '0210';
		ELSEIF STARTSWITH(OutputRoot.XMLNSC.data.body.messageType, '04') THEN
			SET OutputRoot.XMLNSC.data.body.messageType = '0410';
		END IF;
		SET OutputRoot.XMLNSC.data.body.responseCode = '68';
		SET OutputRoot.MQMD.ReplyToQ = InputRoot.XMLNSC.data.ReplyToQ;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


--CREATE COMPUTE MODULE MASTER_ISO_FLOW_SET_LOCALENV
--	CREATE FUNCTION Main() RETURNS BOOLEAN
--	BEGIN
--		SET OutputLocalEnvironment.data = InputRoot.XMLNSC.data.body.frontOriginal;
--		RETURN TRUE;
--	END;
--
--	CREATE PROCEDURE CopyMessageHeaders() BEGIN
--		DECLARE I INTEGER 1;
--		DECLARE J INTEGER;
--		SET J = CARDINALITY(InputRoot.*[]);
--		WHILE I < J DO
--			SET OutputRoot.*[I] = InputRoot.*[I];
--			SET I = I + 1;
--		END WHILE;
--	END;
--
--	CREATE PROCEDURE CopyEntireMessage() BEGIN
--		SET OutputRoot = InputRoot;
--	END;
--END MODULE;


CREATE FILTER MODULE MASTER_ISO_FLOW_Filter
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF Root.XMLNSC.data.isRepeat = 'repeat' AND (Root.XMLNSC.data.request.data.flowType = 'P' OR Root.XMLNSC.data.request.data.flowType = 'p') THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;

END MODULE;


CREATE COMPUTE MODULE MASTER_ISO_FLOW_SET_LABEL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.data = InputRoot.XMLNSC.data.request.data;
		IF InputRoot.XMLNSC.data.request.data.TimeOutCounter IS NOT NULL THEN
				SET OutputRoot.XMLNSC.data.TimeOutCounter = CAST(InputRoot.XMLNSC.data.request.data.TimeOutCounter AS INTEGER) + 1;
			ELSE
				SET OutputRoot.XMLNSC.data.TimeOutCounter = 1;
			END IF;
		IF InputRoot.XMLNSC.data.body.messageType = '0210' THEN
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelname = 'resp-reverse';
		ELSE
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelname = 'repeat';
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE MASTER_ISO_FLOW_CHECK_MSG
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		IF InputRoot.XMLNSC.data.body.messageType = '0210' THEN
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelname = 'late-reverse';
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE MASTER_ISO_FLOW_CHECK_COUNTER
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		IF InputRoot.XMLNSC.data.TimeOutCounter < 4 THEN
			RETURN TRUE;
		END IF;
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE MASTER_ISO_FLOW_SET_RAW
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.XMLNSC.data.raw = InputLocalEnvironment.reqori.RAW;
		SET OutputRoot.XMLNSC.data.type = InputLocalEnvironment.reqori.TYPE;
		SET OutputRoot.XMLNSC.data.timestamp = InputRoot.XMLNSC.data.timestamp;
		SET OutputRoot.XMLNSC.data.reqtimestamp = InputRoot.XMLNSC.data.timestamp;
		IF InputLocalEnvironment.reqori.TYPE LIKE '%dsp%' THEN
			SET OutputRoot.XMLNSC.data.type = 'dsp-abcs-request';
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE MASTER_ISO_FLOW_CHECK_PROCODE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		--IF STARTSWITH(InputRoot.XMLNSC.data.body.processingCode,'10') THEN
			SET OutputRoot.XMLNSC.data.reqtimestamp = InputRoot.XMLNSC.data.timestamp;
			RETURN TRUE;
		--ELSE
		--	RETURN FALSE;
		--END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE MASTER_ISO_FLOW_SET_CORE_QUEUE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		IF InputRoot.XMLNSC.data.destinationQueueName IS NOT NULL THEN
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData.queueName = InputRoot.XMLNSC.data.destinationQueueName;
		ELSE
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData.queueName = 'CORE_IN';
		END IF;
		SET OutputRoot.XMLNSC.data.body.frontOriginal = InputLocalEnvironment.data;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
