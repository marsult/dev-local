BROKER SCHEMA ACE_LIB
DECLARE ERROR_MAP_HTTP SHARED ROW;
DECLARE ERROR_MAP SHARED ROW;

CREATE PROCEDURE generateErrorHTTP(IN origin CHARACTER, IN code CHARACTER, IN target CHARACTER, IN OutputMessage REFERENCE, IN ref REFERENCE, IN Error REFERENCE)
BEGIN
	IF FIELDTYPE(ERROR_MAP_HTTP.{target}.{origin}.{code}) IS NULL THEN
		SET ERROR_MAP_HTTP.{target}.{origin}.{code} = THE(SELECT
		E.ID, E.ORIGIN, E.CODE, E.NOTES, E.TARGET, E.F039, E.RC, E.MESSAGE, E.SEVERITY_STATUS, E.DESCRIPTION, E.MESSAGE_ID, E.FIELD_IN_ERROR, E.IS_OVERRIDE, E.SEVERITY, E.AUTHORITY, E.HTTP_STATUS_CODE, E.HTTP_SERVICE_CODE, E.HTTP_CASE_CODE, E.HTTP_ERROR_MESSAGE, E.RC_GROUP
		FROM Database.ERROR_MAP AS E
		WHERE E.ORIGIN = origin AND E.TARGET = target AND E.CODE = code
		);
	END IF;

	IF CONTAINS(target, 'APIM')  THEN
		DECLARE em REFERENCE TO ERROR_MAP_HTTP.{target}.{origin}.{code};
		IF em.HTTP_STATUS_CODE IS NOT NULL THEN
			SET OutputMessage.STATUS_CODE = em.HTTP_STATUS_CODE;
			SET OutputMessage.responseCode = em.HTTP_STATUS_CODE || COALESCE(ref.SERVICE_CODE, '00') || COALESCE(em.HTTP_CASE_CODE, '00');
			SET OutputMessage.responseMessage = em.HTTP_ERROR_MESSAGE;
		ELSE
			MOVE em TO ERROR_MAP_HTTP.{target}.{origin}.{'*'};
			IF em.HTTP_STATUS_CODE IS NOT NULL THEN
				SET OutputMessage.STATUS_CODE = em.HTTP_STATUS_CODE;
				SET OutputMessage.responseCode = em.HTTP_STATUS_CODE || COALESCE(ref.SERVICE_CODE, '00') || COALESCE(em.HTTP_CASE_CODE, '00');
				SET OutputMessage.responseMessage = em.HTTP_ERROR_MESSAGE;
			ELSE
				SET OutputMessage.STATUS_CODE = '204';
				SET OutputMessage.responseCode = '204'||COALESCE(ref.SERVICE_CODE, '00')||'05';
				SET OutputMessage.responseMessage = 'Unknown Error Map - '|| code;
			END IF;
		END IF;
	ELSEIF CONTAINS(target, 'REST') OR CONTAINS(target, 'SOAP') THEN
		DECLARE em REFERENCE TO ERROR_MAP_HTTP.{target}.{origin}.{code};
		IF em.RC IS NOT NULL THEN
			SET OutputMessage.RC_GROUP = em.RC_GROUP;
			SET OutputMessage.STATUS_CODE = em.HTTP_STATUS_CODE;
			SET OutputMessage.RESPONSE_CODE = ACE_LIB.fixedLenLeftPad(em.RC,4,'0') ;
			SET OutputMessage.RESPONSE_MESSAGE = em.MESSAGE;
		ELSE
			MOVE em TO ERROR_MAP_HTTP.{target}.{origin}.{'*'};
			IF em.HTTP_STATUS_CODE IS NOT NULL THEN
				SET OutputMessage.RC_GROUP = em.RC_GROUP;
				SET OutputMessage.STATUS_CODE = em.HTTP_STATUS_CODE;
				SET OutputMessage.RESPONSE_CODE = ACE_LIB.fixedLenLeftPad(em.RC,4,'0') ;
				SET OutputMessage.RESPONSE_MESSAGE = em.MESSAGE;
			ELSE
				SET OutputMessage.RC_GROUP = 'general-error';
				SET OutputMessage.STATUS_CODE = '204';
				SET OutputMessage.RESPONSE_CODE = '0099';
				SET OutputMessage.RESPONSE_MESSAGE = 'Unknown Error Map - '|| code;
			END IF;
		END IF;
	END IF;
END;


CREATE PROCEDURE handleStatusCode( IN OutputMessage REFERENCE, IN OutputRoot REFERENCE)
BEGIN
	SET OutputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = CAST(OutputMessage.STATUS_CODE AS INTEGER);
	DELETE FIELD OutputMessage.STATUS_CODE;
	DELETE FIELD OutputMessage.SERVICE_CODE;
	DELETE FIELD OutputMessage.CHANNEL_ID;
END;

CREATE COMPUTE MODULE LOG_FAILURE_DB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputRoot = InputRoot;
		IF InputExceptionList.RecoverableException.DatabaseException.Text = 'Exception connection to database' THEN
			DECLARE om REFERENCE TO OutputRoot.JSON.Data;
			SET OutputRoot.JSON.Data.RESPONSE_CODE = '0096';
			SET OutputRoot.JSON.Data.RESPONSE_MESSAGE = 'DataBase Link Down';
			SET OutputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = '500';
			SET OutputLocalEnvironment.SocketException = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.DatabaseException.Text;
		END IF;
		RETURN TRUE;
	END;
END MODULE;

CREATE PROCEDURE genError(IN origin CHARACTER, IN code CHARACTER, IN target CHARACTER, IN OutputMessage REFERENCE, IN Error REFERENCE)
BEGIN

	IF FIELDTYPE(ERROR_MAP.{target}.{origin}.{code}) IS NULL THEN
		SET ERROR_MAP.{target}.{origin}.{code} = THE(SELECT
		E.ID, E.ORIGIN, E.CODE, E.NOTES, E.TARGET, E.F039, E.RC, E.MESSAGE, E.SEVERITY_STATUS, E.DESCRIPTION, E.MESSAGE_ID, E.FIELD_IN_ERROR, E.IS_OVERRIDE, E.SEVERITY, E.AUTHORITY, E.HTTP_STATUS_CODE, E.HTTP_SERVICE_CODE, E.HTTP_CASE_CODE, E.HTTP_ERROR_MESSAGE, E.RC_GROUP
		FROM Database.ERROR_MAP AS E
		WHERE E.ORIGIN = origin AND E.TARGET = target AND E.CODE = code
		);
	END IF;

	CASE
	WHEN target = 'ENKAPS' THEN
		DECLARE em REFERENCE TO ERROR_MAP.{target}.{origin}.{code};
		IF em.RC IS NOT NULL THEN
			SET OutputMessage.RC_GROUP = em.RC_GROUP;
			SET OutputMessage.RC = em.RC;
			SET OutputMessage.RCMSG = em.MESSAGE;
			SET OutputMessage.RCINFO.{'0'}.SEVERITY_STATUS = em.SEVERITY_STATUS;
			SET OutputMessage.RCINFO.{'0'}.DESCRIPTION = em.DESCRIPTION;
			SET OutputMessage.RCINFO.{'0'}.MESSAGE_ID = em.MESSAGE_ID;
			SET OutputMessage.RCINFO.{'0'}.FIELD_IN_ERROR = em.FIELD_IN_ERROR;
			SET OutputMessage.RCINFO.{'0'}.IS_OVERRIDE = em.IS_OVERRIDE;
			SET OutputMessage.RCINFO.{'0'}.SEVERITY = em.SEVERITY;
			SET OutputMessage.RCINFO.{'0'}.AUTHORITY = em.AUTHORITY;
			SET OutputMessage.RCINFO.{'0'}.ERROR = Error;
		ELSE
			SET OutputMessage.RC_GROUP = 'general-error';
			SET OutputMessage.RC = '0099';
			SET OutputMessage.RCMSG.{'0'}.MESSAGE = 'Unknown "' || target || '" "' || origin || '" "' || code || '"';
			SET OutputMessage.RCMSG.{'0'}.ERROR = Error;
		END IF;
	WHEN target = 'CONVERTERJSON' THEN
		DECLARE em REFERENCE TO ERROR_MAP.{target}.{origin}.{code};
		IF origin = 'MDW' THEN
			SET OutputMessage.MT = OVERLAY(OutputMessage.MT PLACING '1' FROM 3 FOR 1);
		END IF;
		IF em.RC IS NOT NULL THEN
			SET OutputMessage.RC_GROUP = em.RC_GROUP;
			SET OutputMessage.RC = em.RC;
			SET OutputMessage.RCMSG = em.MESSAGE;
		ELSE
			SET OutputMessage.RC_GROUP = 'general-error';
			SET OutputMessage.RC = '0099';
			SET OutputMessage.RCMSG = 'Unknown "' || target || '" "' || origin || '" "' || code || '"';
		END IF;
	WHEN CONTAINS(target, 'JSON') THEN
		DECLARE em REFERENCE TO ERROR_MAP.{target}.{origin}.{code};
		IF origin = 'MDW' THEN
			SET OutputMessage.MT = OVERLAY(OutputMessage.MT PLACING '1' FROM 3 FOR 1);
		END IF;
		IF em.RC IS NOT NULL THEN
			SET OutputMessage.RC_GROUP = em.RC_GROUP;
			SET OutputMessage.RC = em.RC;
			SET OutputMessage.RCMSG.{'0'}.MESSAGE = em.MESSAGE;
			SET OutputMessage.RCMSG.{'0'}.SEVERITY_STATUS = em.SEVERITY_STATUS;
			SET OutputMessage.RCMSG.{'0'}.DESCRIPTION = em.DESCRIPTION;
			SET OutputMessage.RCMSG.{'0'}.MESSAGE_ID = em.MESSAGE_ID;
			SET OutputMessage.RCMSG.{'0'}.FIELD_IN_ERROR = em.FIELD_IN_ERROR;
			SET OutputMessage.RCMSG.{'0'}.IS_OVERRIDE = em.IS_OVERRIDE;
			SET OutputMessage.RCMSG.{'0'}.SEVERITY = em.SEVERITY;
			SET OutputMessage.RCMSG.{'0'}.AUTHORITY = em.AUTHORITY;
			SET OutputMessage.RCMSG.{'0'}.ERROR = Error;
		ELSE
			SET OutputMessage.RC_GROUP = 'general-error';
			SET OutputMessage.RC = '0099';
			SET OutputMessage.RCMSG.{'0'}.MESSAGE = 'Unknown "' || target || '" "' || origin || '" "' || code || '"';
			SET OutputMessage.RCMSG.{'0'}.ERROR = Error;
		END IF;
	WHEN CONTAINS(target, 'ISO8583') THEN
		DECLARE em REFERENCE TO ERROR_MAP.{target}.{origin}.{code};
		IF origin = 'MDW' THEN
			IF FIELDTYPE(OutputMessage.MTI_MessageFunction) IS NOT NULL THEN
				SET OutputMessage.MTI_MessageFunction = CAST(CAST(OutputMessage.MTI_MessageFunction AS INT) + 1 AS CHAR);
			ELSE
				SET OutputMessage.MTI_MessageFunction = '1';
			END IF;
			SET OutputMessage.MTI_MessageOrigin = '0';
		END IF;
		IF em.F039 IS NOT NULL THEN
			SET OutputMessage.RC_GROUP = em.RC_GROUP;
			SET OutputMessage.F039 = em.F039;
		ELSE
			SET OutputMessage.RC_GROUP = 'general-error';
			SET OutputMessage.F039 = '76';
			SET OutputMessage.F127 = 'Unknown "' || target || '" "' || origin || '" "' || code || '"';
		END IF;
	ELSE
		SET OutputMessage.RC_GROUP = 'general-error';
		SET OutputMessage.RC = '0099';
		SET OutputMessage.RCMSG.{'0'}.MESSAGE = 'Unknown "' || target || '" "' || origin || '" "' || code || '"';
		SET OutputMessage.RCMSG.{'0'}.ERROR = Error;
	END CASE;
END;


CREATE PROCEDURE getLastExceptionDetail(IN InputTree reference,OUT messageNumber integer, OUT messageText char)
/****************************************************************************
* A procedure that will get the details of the last exception from a message
* IN InputTree: The incoming exception list
* IN messageNumber: The last message numberr.
* IN messageText: The last message text.
*****************************************************************************/
BEGIN
-- Create a reference to the first child of the exception list
	DECLARE ptrException reference to InputTree;
	DECLARE isRecoverableException BOOLEAN;
	DECLARE isUserException BOOLEAN;
	DECLARE isMessageException BOOLEAN;
	DECLARE isSocketException BOOLEAN;
	DECLARE isParserException BOOLEAN;
	DECLARE isDatabaseException BOOLEAN;
	DECLARE isSocketTimeoutException BOOLEAN;
	
	-- keep looping while the moves to the child of exception list work
	WHILE lastmove(ptrException) DO
			-- store the current values for the error number and text
--			IF ptrException.Number is not null THEN
				
			SET isRecoverableException = EXISTS (ptrException.RecoverableException.*[]);
			SET isMessageException = EXISTS (ptrException.MessageException.*[]);
			SET isUserException = EXISTS (ptrException.RecoverableException.UserException.*[]);
			SET isSocketException = EXISTS (ptrException.RecoverableException.SocketException.*[]);
			SET isParserException = EXISTS (ptrException.ParserException.*[]);
			SET isDatabaseException = EXISTS (ptrException.DatabaseException.*[]);
			SET isSocketTimeoutException = EXISTS (ptrException.RecoverableException.SocketTimeoutException.*[]);
			
			IF isRecoverableException = TRUE THEN									
				-- Exception that thrown by using User Exception
				IF isUserException = TRUE THEN 
					SET messageNumber = ptrException.RecoverableException.UserException.Number;
					SET messageText = ptrException.RecoverableException.UserException.Insert[1].Text;					
				
				-- Exception for FTP protocol connection
				ELSEIF ptrException.RecoverableException.Number > 3379 AND ptrException.RecoverableException.Number < 3386 THEN
					SET messageNumber = ptrException.RecoverableException.Number;
					SET messageText = ptrException.RecoverableException.Insert[4].Text;					
				
				-- Exception for Socket connection Exception
				ELSEIF isSocketException = TRUE THEN
					SET messageNumber = ptrException.RecoverableException.SocketException.Number;
					SET messageText = ptrException.RecoverableException.SocketException.Text;										
				ELSEIF isSocketTimeoutException = TRUE THEN
					SET messageNumber = ptrException.RecoverableException.SocketTimeoutException.Number;
					SET messageText = ptrException.RecoverableException.SocketTimeoutException.Text;										
				ELSE
					SET messageNumber = ptrException.RecoverableException.Number;
					SET messageText = ptrException.RecoverableException.Text; 						
				END IF;
			
			-- Exception for Message Exception
			ELSEIF isMessageException = TRUE THEN
				SET messageNumber = ptrException.MessageException.Number;
				SET messageText = ptrException.MessageException.Text;
			
			-- Exception for Parser Exception
			ELSEIF isParserException = TRUE THEN
				SET messageNumber = ptrException.ParserException.Number;
				SET messageText = ptrException.ParserException.Text;
				
			-- Exception for Parser Exception
			ELSEIF isDatabaseException = TRUE THEN
				SET messageNumber = ptrException.DatabaseException.Number;
				SET messageText = ptrException.DatabaseException.Insert[3].Text;
				
			END IF;									
		-- now move to the last child which should be the next exceptionlist
		move ptrException lastchild;
	END WHILE;
END;