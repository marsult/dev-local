BROKER SCHEMA ACE_LIB

CREATE PROCEDURE javaLogDebugRef(IN type CHAR, IN msg CHAR, IN value REFERENCE) LANGUAGE JAVA EXTERNAL NAME "id.co.hanoman.Log.logDebugRef";

CREATE PROCEDURE javaLogInfoRef(IN type CHAR, IN msg CHAR, IN value REFERENCE) LANGUAGE JAVA EXTERNAL NAME "id.co.hanoman.Log.logInfoRef";

CREATE PROCEDURE javaLogDebugNodeType(INOUT type CHARACTER, OUT ltype CHARACTER) RETURNS BOOLEAN LANGUAGE JAVA EXTERNAL NAME "id.co.hanoman.Log.logDebugNodeType";

CREATE PROCEDURE javaLogInfoNodeType(INOUT type CHARACTER, OUT ltype CHARACTER) RETURNS BOOLEAN LANGUAGE JAVA EXTERNAL NAME "id.co.hanoman.Log.logInfoNodeType";

CREATE PROCEDURE javaLogDebugNode(IN brokerlabel CHAR,IN node CHAR, IN type CHAR, IN ltype CHAR, IN value CHARACTER) LANGUAGE JAVA EXTERNAL NAME "id.co.hanoman.Log.logDebugNode";

CREATE PROCEDURE javaLogInfoNode(IN node CHAR, IN type CHAR, IN ltype CHAR, IN value CHARACTER) LANGUAGE JAVA EXTERNAL NAME "id.co.hanoman.Log.logInfoNode";

CREATE PROCEDURE javaLogDebugChar(IN type CHAR, IN value CHARACTER) LANGUAGE JAVA EXTERNAL NAME "id.co.hanoman.Log.logDebugChar";

CREATE PROCEDURE javaLogInfoChar(IN type CHAR, IN value CHARACTER) LANGUAGE JAVA EXTERNAL NAME "id.co.hanoman.Log.logInfoChar";

CREATE PROCEDURE javaLogInfoJSON(IN type CHAR, IN msg CHAR, IN value CHARACTER) LANGUAGE JAVA EXTERNAL NAME "id.co.hanoman.Log.logInfoJSON";

CREATE PROCEDURE stringEscape(IN type CHARACTER) RETURNS CHARACTER LANGUAGE JAVA EXTERNAL NAME "id.co.hanoman.Log.escape";

CREATE PROCEDURE stringUnescape(IN type CHARACTER) RETURNS CHARACTER LANGUAGE JAVA EXTERNAL NAME "id.co.hanoman.Log.unescape";
  
  CREATE PROCEDURE logDebug(IN id CHARACTER, IN LocalEnvironment REFERENCE, IN ExceptionList REFERENCE, IN Root REFERENCE)
  BEGIN
  	DECLARE node CHARACTER MessageFlowLabel || '.' || NodeLabel || '.' || id;
  	DECLARE type CHARACTER node;
  	DECLARE ltype CHARACTER;
  	DECLARE brokerlabel CHARACTER BrokerName||'-'||ExecutionGroupLabel;
  	IF javaLogDebugNodeType(type, ltype) THEN
  		DECLARE json ROW;
  		CREATE LASTCHILD OF json DOMAIN 'JSON' NAME 'JSON';
  		CREATE FIELD json.JSON.Data TYPE Name;
  		CREATE FIELD json.JSON.Data.Root TYPE Name;
  		DECLARE data REFERENCE TO json.JSON.Data.Root;
  
  		IF FIELDTYPE(ExceptionList.*) IS NOT NULL THEN
  			SET data.ExceptionList = ExceptionList;
  		END IF;
  		IF FIELDTYPE(LocalEnvironment.*) IS NOT NULL THEN
  			SET data.LocalEnvironment = LocalEnvironment;
  		END IF;
  		IF FIELDTYPE(Root.*) IS NOT NULL THEN
  			IF FIELDTYPE(Root.XMLNSC.*) IS NOT NULL THEN
  				DECLARE ptr REFERENCE TO Root.XMLNSC;
  				MOVE ptr FIRSTCHILD;
  				CREATE FIELD data.Root TYPE Name;
  				SET data.Root.Properties = Root.Properties;
  				SET data.Root.MQMD = Root.MQMD;
  				CREATE FIELD data.Root.XMLNSC TYPE Name;
  				DECLARE nx REFERENCE TO data.Root.XMLNSC;
  				WHILE LASTMOVE(ptr) DO
  					IF FIELDNAMESPACE(ptr) IS NOT NULL AND FIELDNAMESPACE(ptr) <> '' THEN
  						SET nx.{FIELDNAMESPACE(ptr) || ':' || FIELDNAME(ptr)} = ptr;
  					ELSE
  						SET nx.{FIELDNAME(ptr)} = ptr;
  					END IF;
  					MOVE ptr NEXTSIBLING;
  				END WHILE;
  			ELSE
  				SET data.Root = Root;
  			END IF;
  		END IF;
  
  		DECLARE options INTEGER 0;
  		DECLARE value CHAR CAST(ASBITSTREAM(json OPTIONS options CCSID 1208) AS CHAR CCSID 1208 Encoding 815);
  		CALL javaLogDebugNode(brokerlabel,node, type, ltype, value);
  	END IF;
  END;
  
  CREATE PROCEDURE logDebugRef(IN id CHARACTER, IN ref REFERENCE)
  BEGIN
  	DECLARE node CHARACTER MessageFlowLabel || '.' || NodeLabel || '.' || id;
  	DECLARE type CHARACTER node;
  	DECLARE ltype CHARACTER;
  	DECLARE brokerlabel CHARACTER BrokerName||'-'||ExecutionGroupLabel;
  	IF javaLogDebugNodeType(type, ltype) THEN
  		DECLARE json ROW;
  		CREATE LASTCHILD OF json DOMAIN 'JSON' NAME 'JSON';
  		SET json.JSON.Data.Root = ref;
  
  		DECLARE options INTEGER 0;
  		DECLARE value CHAR CAST(ASBITSTREAM(json OPTIONS options CCSID 1208) AS CHAR CCSID 1208 Encoding 815);
  		CALL javaLogDebugNode(brokerlabel,node, type, ltype, value);
  	END IF;
  END;
  
  CREATE PROCEDURE logDebugChar(IN id CHARACTER, IN v CHARACTER)
  BEGIN
  	CALL javaLogDebugChar(MessageFlowLabel || '.' || NodeLabel || '.' || id, v);
  END;
  
  
  CREATE PROCEDURE logInfo(IN id CHARACTER, IN LocalEnvironment REFERENCE, IN ExceptionList REFERENCE, IN Root REFERENCE)
  BEGIN
  	DECLARE node CHARACTER MessageFlowLabel || '.' || NodeLabel || '.' || id;
  	DECLARE type CHARACTER node;
  	DECLARE ltype CHARACTER;

  	IF javaLogInfoNodeType(type, ltype) THEN
  		DECLARE json ROW;
  		CREATE LASTCHILD OF json DOMAIN 'JSON' NAME 'JSON';
  		CREATE FIELD json.JSON.Data TYPE Name;
  		CREATE FIELD json.JSON.Data.Root TYPE Name;
  		DECLARE data REFERENCE TO json.JSON.Data.Root;
  
  		IF FIELDTYPE(ExceptionList.*) IS NOT NULL THEN
  			SET data.ExceptionList = ExceptionList;
  		END IF;
  		IF FIELDTYPE(LocalEnvironment.*) IS NOT NULL THEN
  			SET data.LocalEnvironment = LocalEnvironment;
  		END IF;
  		IF FIELDTYPE(Root.*) IS NOT NULL THEN
  			IF FIELDTYPE(Root.XMLNSC.*) IS NOT NULL THEN
  				DECLARE ptr REFERENCE TO Root.XMLNSC;
  				MOVE ptr FIRSTCHILD;
  				CREATE FIELD data.Root TYPE Name;
  				SET data.Root.Properties = Root.Properties;
  				SET data.Root.MQMD = Root.MQMD;
  				CREATE FIELD data.Root.XMLNSC TYPE Name;
  				DECLARE nx REFERENCE TO data.Root.XMLNSC;
  				WHILE LASTMOVE(ptr) DO
  					IF FIELDNAMESPACE(ptr) IS NOT NULL AND FIELDNAMESPACE(ptr) <> '' THEN
  						SET nx.{FIELDNAMESPACE(ptr) || ':' || FIELDNAME(ptr)} = ptr;
  					ELSE
  						SET nx.{FIELDNAME(ptr)} = ptr;
  					END IF;
  					MOVE ptr NEXTSIBLING;
  				END WHILE;
  			ELSE
  				SET data.Root = Root;
  			END IF;
  		END IF;
  
  		DECLARE options INTEGER 0;
  		DECLARE value CHAR CAST(ASBITSTREAM(json OPTIONS options CCSID 1208) AS CHAR CCSID 1208 Encoding 815);
  		CALL javaLogInfoNode(node, type, ltype, value);
  	END IF;
  END;
  
  CREATE PROCEDURE logInfoBlob(IN id CHARACTER, IN LocalEnvironment REFERENCE, IN ExceptionList REFERENCE, IN Root REFERENCE)
  BEGIN
  	DECLARE node CHARACTER MessageFlowLabel || '.' || NodeLabel || '.' || id;
  	DECLARE type CHARACTER node;
  	DECLARE ltype CHARACTER;
  
  	IF javaLogInfoNodeType(type, ltype) THEN
  		DECLARE json ROW;
  		CREATE LASTCHILD OF json DOMAIN 'JSON' NAME 'JSON';
  		CREATE FIELD json.JSON.Data TYPE Name;
  		CREATE FIELD json.JSON.Data.Root TYPE Name;
  		DECLARE data REFERENCE TO json.JSON.Data.Root;
  
  		IF FIELDTYPE(ExceptionList.*) IS NOT NULL THEN
  			SET data.ExceptionList = ExceptionList;
  		END IF;
  		IF FIELDTYPE(LocalEnvironment.*) IS NOT NULL THEN
  			SET data.LocalEnvironment = LocalEnvironment;
  		END IF;
  		IF FIELDTYPE(Root.*) IS NOT NULL THEN
  			IF FIELDTYPE(Root.BLOB.*) IS NOT NULL THEN
  				DECLARE ptr REFERENCE TO Root.BLOB;
  				MOVE ptr FIRSTCHILD;
  				CREATE FIELD data.Root TYPE Name;
  				SET data.Root.Properties = Root.Properties;
  				SET data.Root.MQMD = Root.MQMD;
  				CREATE FIELD data.Root.BLOB TYPE Name;
  				DECLARE nx REFERENCE TO data.Root.BLOB;
  				WHILE LASTMOVE(ptr) DO
  					IF FIELDNAME(ptr) IS NOT NULL AND FIELDNAME(ptr) = 'BLOB' THEN
  						SET nx.BLOB = CAST(Root.BLOB.BLOB as char CCSID Root.Properties.CodedCharSetId Encoding Root.Properties.Encoding);
  					ELSE
  						SET nx.{FIELDNAME(ptr)} = ptr;
  					END IF;
  					MOVE ptr NEXTSIBLING;
  				END WHILE;
  			ELSE
  				SET data.Root = Root;
  			END IF;
  		END IF;
  
  		DECLARE options INTEGER 0;
  		DECLARE value CHAR CAST(ASBITSTREAM(json OPTIONS options CCSID 1208) AS CHAR CCSID 1208 Encoding 815);
  		CALL javaLogInfoNode(node, type, ltype, value);
  	END IF;
  END;
    
  CREATE PROCEDURE logInfoRef(IN id CHARACTER, IN ref REFERENCE)
  BEGIN
  	DECLARE node CHARACTER MessageFlowLabel || '.' || NodeLabel || '.' || id;
  	DECLARE type CHARACTER node;
  	DECLARE ltype CHARACTER;
  
  	IF javaLogInfoNodeType(type, ltype) THEN
  		DECLARE json ROW;
  		CREATE LASTCHILD OF json DOMAIN 'JSON' NAME 'JSON';
  		SET json.JSON.Data.Root = ref;
  
  		DECLARE options INTEGER 0;
  		DECLARE value CHAR CAST(ASBITSTREAM(json OPTIONS options CCSID 1208) AS CHAR CCSID 1208 Encoding 815);
  		CALL javaLogInfoNode(node, type, ltype, value);
  	END IF;
  END;
  
  CREATE PROCEDURE logInfoChar(IN id CHARACTER, IN v CHARACTER)
  BEGIN
  	CALL javaLogInfoChar(MessageFlowLabel || '.' || NodeLabel || '.' || id, v);
  END;