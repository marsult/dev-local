BROKER SCHEMA GATEWAY

CREATE COMPUTE MODULE HTTP_PROCESS_SET_RESPONSE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		DECLARE response CHAR;
		IF InputRoot.HTTPRequestHeader."Content-Type" = 'text/plain' THEN
			SET response = CAST(InputRoot.BLOB.BLOB AS CHAR CCSID 1208);
		ELSE
			SET response = InputRoot.JSON.Data;
		END IF;	
		DECLARE decodedClaims CHAR;
		CALL ACE_LIB.logDebug('SET SUCCESS RESPONSE', InputLocalEnvironment, InputExceptionList, InputRoot);
		IF InputLocalEnvironment.BackupReq.needdecode IS NOT NULL AND InputLocalEnvironment.BackupReq.needdecode = 'True' AND InputLocalEnvironment.BackupReq.auth = 'signature' THEN
			IF InputLocalEnvironment.BackupReq.tokentype = 'JWT' THEN
				DECLARE decodedbody CHAR ACE_LIB.decodejwttoken(response);
				DECLARE tempBlob BLOB CAST(decodedbody AS BLOB CCSID 1208);
--				SET OutputRoot.BLOB.BLOB = tempBlob;
				CALL ACE_LIB.logDebug(CAST(tempBlob AS CHAR CCSID 1208), InputLocalEnvironment, InputExceptionList, InputRoot);
				CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(tempBlob);
				DELETE FIELD OutputRoot.BLOB;
				CALL ACE_LIB.logDebug('SETTING ERROR RESPONSE', InputLocalEnvironment, InputExceptionList, InputRoot);
			END IF;
		END IF;
		CALL ACE_LIB.logDebug('AFTER SET SUCCESS RESPONSE', InputLocalEnvironment, InputExceptionList, InputRoot);
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment = InputLocalEnvironment;
	END;
END MODULE;

CREATE COMPUTE MODULE HTTP_PROCESS_SET_RESPONSE_FAIL
	DECLARE TYPE_FAIL EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		DECLARE messageNumber INTEGER;
		DECLARE messageText CHAR;
		DELETE FIELD OutputRoot.BLOB;
		SET OutputRoot.JSON.Data.code = '400';
		IF TYPE_FAIL IS NOT NULL AND TYPE_FAIL = 'existing' THEN
			IF InputExceptionList.RecoverableException.SocketException.Text IS NOT NULL OR InputExceptionList.RecoverableException.RecoverableException.SocketException.Text IS NOT NULL OR InputExceptionList.RecoverableException.RecoverableException.RecoverableException.SocketException.Text IS NOT NULL THEN
				SET OutputRoot.JSON.Data.faultcode = 'G02';
				SET OutputRoot.JSON.Data.faultmessage = 'Failed to Connect';
			ELSEIF InputExceptionList.RecoverableException.SocketTimeoutException.Text IS NOT NULL OR InputExceptionList.RecoverableException.RecoverableException.SocketTimeoutException.Text IS NOT NULL OR InputExceptionList.RecoverableException.RecoverableException.RecoverableException.SocketTimeoutException.Text IS NOT NULL THEN
				SET OutputRoot.JSON.Data.faultcode = 'G01';
				SET OutputRoot.JSON.Data.faultmessage = 'Timeout from VaDebit';
			ELSE
				SET OutputRoot.JSON.Data.faultcode = 'G99';
				SET OutputRoot.JSON.Data.faultmessage = 'General Error';
			END IF;
		END IF;
		CREATE FIELD OutputLocalEnvironment.faultDesc TYPE Name;
		CALL ACE_LIB.handleException(OutputLocalEnvironment.faultDesc, InputExceptionList);
		SET OutputRoot.JSON.Data.faultdescription = OutputLocalEnvironment.faultDesc.Message;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE HTTP_PROCESS_SET_RESPONSE_ERROR
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		DECLARE response CHAR;
		IF InputRoot.HTTPRequestHeader."Content-Type" = 'text/plain' THEN
			SET response = CAST(InputLocalEnvironment.error.BLOB AS CHAR CCSID 1208);
			CALL ACE_LIB.logDebug('SET RESPONSE'||response, InputLocalEnvironment, InputExceptionList, InputRoot);
		ELSE
			SET response = InputRoot.JSON.Data;
			CALL ACE_LIB.logDebug('SET RESPONSE JSON DATA', InputLocalEnvironment, InputExceptionList, InputRoot);
		END IF;	
		DECLARE decodedClaims CHAR;
		CALL ACE_LIB.logDebug('SET ERROR RESPONSE', InputLocalEnvironment, InputExceptionList, InputRoot);
		IF InputLocalEnvironment.BackupReq.needdecode IS NOT NULL AND InputLocalEnvironment.BackupReq.needdecode = 'True' AND InputLocalEnvironment.BackupReq.auth = 'signature' THEN
			IF InputLocalEnvironment.BackupReq.tokentype = 'JWT' THEN
				IF CONTAINS(response,'btn.invalid.request') OR CONTAINS(response,'btn.procode.not.valid') OR CONTAINS(response,'btn.url.not.valid') THEN
					SET OutputLocalEnvironment.response = response;
				ELSE
					DECLARE decodedbody CHAR ACE_LIB.decodejwttoken(response);
					DECLARE tempBlob BLOB CAST(decodedbody AS BLOB CCSID 1208);
--					SET OutputRoot.BLOB.BLOB = tempBlob;
					CALL ACE_LIB.logDebug(CAST(tempBlob AS CHAR CCSID 1208), InputLocalEnvironment, InputExceptionList, InputRoot);
					CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(tempBlob);
					DELETE FIELD OutputRoot.BLOB;
					CALL ACE_LIB.logDebug('SETTING ERROR RESPONSE', InputLocalEnvironment, InputExceptionList, InputRoot);
				END IF;
			END IF;
		END IF;
		CALL ACE_LIB.logDebug('AFTER SET ERROR RESPONSE', InputLocalEnvironment, InputExceptionList, InputRoot);
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputRoot = InputRoot;
	END;
END MODULE;
