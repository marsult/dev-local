BROKER SCHEMA GATEWAY



CREATE COMPUTE MODULE REQ_TOKEN_SET_REQUEST_AFTER_TOKEN
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DELETE FIELD OutputRoot.JSON;
		SET OutputRoot.JSON.Data = InputLocalEnvironment.OriginalRequest;
		DELETE FIELD OutputLocalEnvironment.OriginalRequest;
		DECLARE SHARE CHARACTER InputLocalEnvironment.backup.code;
		DECLARE res ROW;
		DECLARE TOKENAPP CHARACTER InputRoot.JSON.Data.token;
		DECLARE EXPIRY TIMESTAMP CURRENT_TIMESTAMP + CAST(60 AS INTERVAL SECOND);
		IF InputLocalEnvironment.PASSTHRU = TRUE THEN
			SET OutputLocalEnvironment.TOKEN = InputRoot.TOKEN;
		ELSE
			SET res.data[] = (SELECT * FROM Database.MWCONFIG.TOKEN_3RD_PARTY AS A WHERE A.CODE = SHARE);
			IF res.data.CODE IS NOT NULL AND res.data.CODE = 'SHARE' THEN
				SET OutputLocalEnvironment.TOKEN = InputRoot.JSON.Data.token;
				UPDATE Database.MWCONFIG.TOKEN_3RD_PARTY AS E SET TOKEN = InputRoot.JSON.Data.token, EXPIRY = EXPIRY WHERE E.CODE = SHARE;
			ELSE
				SET OutputLocalEnvironment.TOKEN = InputRoot.JSON.Data.token;
				INSERT INTO Database.MWCONFIG.TOKEN_3RD_PARTY(CODE,TOKEN,EXPIRY) VALUES (SHARE, InputRoot.JSON.Data.token, EXPIRY);
			END IF;
		END IF;
		DECLARE BACKEND_URL1 CHARACTER InputLocalEnvironment.backup.HTTPUrl;
		SET OutputLocalEnvironment.OriginalRequest = InputRoot;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = BACKEND_URL1;
		-- Setting Header
		SET OutputRoot.HTTPRequestHeader.Host = SUBSTRING(SUBSTRING(BACKEND_URL1 AFTER '://') BEFORE '/');	
    	SET OutputRoot.HTTPRequestHeader.Accept = '*/*';
		SET OutputRoot.HTTPRequestHeader.Authorization = 'Bearer ' || TOKENAPP;
    	SET OutputRoot.HTTPRequestHeader."Content-Type" = 'application/json';
       	SET OutputRoot.HTTPRequestHeader."User-Agent" = 'BTN-MDW';
       	SET OutputLocalEnvironment.CurrentTimeStamp = CURRENT_TIMESTAMP;
       	SET OutputLocalEnvironment.Cache = cache;
		RETURN TRUE;
	END;
END MODULE;
