CREATE COMPUTE MODULE ADDITIONAL_RESPONSE_VADEBIT_PAYMENT
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		SET OutputRoot.JSON.Data.request = InputLocalEnvironment.OriginalRequest;
		IF FIELDTYPE(InputLocalEnvironment.error) IS NOT NULL THEN
			DECLARE responseError CHAR InputLocalEnvironment.response;
			CALL ACE_LIB.logDebug('SET ERROR VASCOM', InputLocalEnvironment, InputExceptionList, InputRoot);
			IF CONTAINS(responseError,'btn.invalid.request') OR CONTAINS(responseError,'btn.procode.not.valid') OR CONTAINS(responseError,'btn.url.not.valid') THEN
				SET OutputRoot.JSON.Data.response = InputLocalEnvironment.OriginalRequest;
				CALL ACE_LIB.logDebug('SETTING ERROR VASCOM', InputLocalEnvironment, InputExceptionList, InputRoot);
				DELETE FIELD OutputRoot.JSON.Data.response.data;
				DECLARE colonPos INTEGER POSITION(':' IN responseError);
				DECLARE errCode CHAR SUBSTRING(responseError FROM 1 FOR colonPos - 1);
				DECLARE errDescr CHAR TRIM(LEADING ' ' FROM SUBSTRING(responseError FROM colonPos + 1));
				SET OutputRoot.JSON.Data.response.data.Item.errCode = errCode;
				SET OutputRoot.JSON.Data.response.data.Item.errDescr = errDescr;
			ELSE
				SET OutputRoot.JSON.Data.response = InputRoot.JSON.Data;
			END IF;
		ELSE
			SET OutputRoot.JSON.Data.request = InputLocalEnvironment.OriginalRequest;
			SET OutputRoot.JSON.Data.response = InputRoot.JSON.Data;
		END IF;
		RETURN TRUE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputLocalEnvironment = InputLocalEnvironment;
	END;
END MODULE;

